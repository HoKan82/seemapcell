#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by LINQ to SQL template for T4 C#
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.ComponentModel;
using System.Data.Linq;
using System.Data.Linq.Mapping;

namespace Linq2SqlGeography.LinqSql.FromOSS
{
	[DatabaseAttribute(Name=@"SqlSpatialJiangmeng")]
	public partial class DataClasses1DataContext : DataContext
	{
		private static MappingSource mappingSource = new AttributeMappingSource();
		
		#region Extensibility Method Definitions
		partial void OnCreated();
		partial void InsertMCOMNEIGH(Linq2SqlGeography.MCOMNEIGH instance);
		partial void UpdateMCOMNEIGH(Linq2SqlGeography.MCOMNEIGH instance);
		partial void DeleteMCOMNEIGH(Linq2SqlGeography.MCOMNEIGH instance);
		partial void InsertMCOMCARRIER(Linq2SqlGeography.MCOMCARRIER instance);
		partial void UpdateMCOMCARRIER(Linq2SqlGeography.MCOMCARRIER instance);
		partial void DeleteMCOMCARRIER(Linq2SqlGeography.MCOMCARRIER instance);
		partial void InsertSITE(Linq2SqlGeography.SITE instance);
		partial void UpdateSITE(Linq2SqlGeography.SITE instance);
		partial void DeleteSITE(Linq2SqlGeography.SITE instance);
		#endregion
		
		#region Construction
		public DataClasses1DataContext() :
			base(global::Linq2SqlGeography.Properties.Settings.Default.SqlSpatialTestConnectionString, mappingSource)
		{
			OnCreated();
		}
	
		public DataClasses1DataContext(string connection) :
			base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) :
			base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, MappingSource mappingSource) :
			base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
			base(connection, mappingSource)
		{
			OnCreated();
		}
		#endregion
		
		#region Tables
		public Table<Linq2SqlGeography.MCOMNEIGH> MCOMNEIGH
		{
			get { return GetTable<Linq2SqlGeography.MCOMNEIGH>(); }
		}
		
		public Table<Linq2SqlGeography.MCOMCARRIER> MCOMCARRIER
		{
			get { return GetTable<Linq2SqlGeography.MCOMCARRIER>(); }
		}
		
		public Table<Linq2SqlGeography.SITE> SITE
		{
			get { return GetTable<Linq2SqlGeography.SITE>(); }
		}
		
		#endregion
	}
}

namespace Linq2SqlGeography
{	
	[Table(Name=@"dbo.MCOMNEIGH")]
	public partial class MCOMNEIGH : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Property Change Event Handling
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		public event PropertyChangingEventHandler PropertyChanging;
		public event PropertyChangedEventHandler PropertyChanged;
		
		public virtual void SendPropertyChanging()
		{
			if (PropertyChanging != null) {
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}
			
		public virtual void SendPropertyChanged(String propertyName)
		{
			if (PropertyChanged != null) {
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public MCOMNEIGH()
		{
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnCellChanging(string value);
		partial void OnCellChanged();
		private string _Cell;
		[Column(Storage=@"_Cell", DbType=@"VarChar(10)")]
		public string Cell
		{
			get { return _Cell; }
			set {
				if (_Cell != value) {
					OnCellChanging(value);
					SendPropertyChanging();
					_Cell = value;
					SendPropertyChanged("Cell");
					OnCellChanged();
				}
			}
		}
		
		partial void OnncellChanging(string value);
		partial void OnncellChanged();
		private string _ncell;
		[Column(Storage=@"_ncell", DbType=@"VarChar(254)")]
		public string ncell
		{
			get { return _ncell; }
			set {
				if (_ncell != value) {
					OnncellChanging(value);
					SendPropertyChanging();
					_ncell = value;
					SendPropertyChanged("ncell");
					OnncellChanged();
				}
			}
		}
		
		partial void OnMI_PRINXChanging(int value);
		partial void OnMI_PRINXChanged();
		private int _MI_PRINX;
		[Column(Storage=@"_MI_PRINX", AutoSync=AutoSync.OnInsert, DbType=@"Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int MI_PRINX
		{
			get { return _MI_PRINX; }
			set {
				if (_MI_PRINX != value) {
					OnMI_PRINXChanging(value);
					SendPropertyChanging();
					_MI_PRINX = value;
					SendPropertyChanged("MI_PRINX");
					OnMI_PRINXChanged();
				}
			}
		}
		
		#endregion
	}
}

namespace Linq2SqlGeography
{	
	[Table(Name=@"dbo.MCOMCARRIER")]
	public partial class MCOMCARRIER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Property Change Event Handling
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		public event PropertyChangingEventHandler PropertyChanging;
		public event PropertyChangedEventHandler PropertyChanged;
		
		public virtual void SendPropertyChanging()
		{
			if (PropertyChanging != null) {
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}
			
		public virtual void SendPropertyChanged(String propertyName)
		{
			if (PropertyChanged != null) {
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public MCOMCARRIER()
		{
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnCellChanging(string value);
		partial void OnCellChanged();
		private string _Cell;
		[Column(Storage=@"_Cell", DbType=@"VarChar(10)")]
		public string Cell
		{
			get { return _Cell; }
			set {
				if (_Cell != value) {
					OnCellChanging(value);
					SendPropertyChanging();
					_Cell = value;
					SendPropertyChanged("Cell");
					OnCellChanged();
				}
			}
		}
		
		partial void OnBSCChanging(string value);
		partial void OnBSCChanged();
		private string _BSC;
		[Column(Storage=@"_BSC", DbType=@"VarChar(10)")]
		public string BSC
		{
			get { return _BSC; }
			set {
				if (_BSC != value) {
					OnBSCChanging(value);
					SendPropertyChanging();
					_BSC = value;
					SendPropertyChanged("BSC");
					OnBSCChanged();
				}
			}
		}
		
		partial void OnLAIChanging(string value);
		partial void OnLAIChanged();
		private string _LAI;
		[Column(Storage=@"_LAI", DbType=@"VarChar(6)")]
		public string LAI
		{
			get { return _LAI; }
			set {
				if (_LAI != value) {
					OnLAIChanging(value);
					SendPropertyChanging();
					_LAI = value;
					SendPropertyChanged("LAI");
					OnLAIChanged();
				}
			}
		}
		
		partial void OnCIChanging(string value);
		partial void OnCIChanged();
		private string _CI;
		[Column(Storage=@"_CI", DbType=@"VarChar(6)")]
		public string CI
		{
			get { return _CI; }
			set {
				if (_CI != value) {
					OnCIChanging(value);
					SendPropertyChanging();
					_CI = value;
					SendPropertyChanged("CI");
					OnCIChanged();
				}
			}
		}
		
		partial void OnBCCHChanging(string value);
		partial void OnBCCHChanged();
		private string _BCCH;
		[Column(Storage=@"_BCCH", DbType=@"VarChar(6)")]
		public string BCCH
		{
			get { return _BCCH; }
			set {
				if (_BCCH != value) {
					OnBCCHChanging(value);
					SendPropertyChanging();
					_BCCH = value;
					SendPropertyChanged("BCCH");
					OnBCCHChanged();
				}
			}
		}
		
		partial void OnBSICChanging(string value);
		partial void OnBSICChanged();
		private string _BSIC;
		[Column(Storage=@"_BSIC", DbType=@"VarChar(4)")]
		public string BSIC
		{
			get { return _BSIC; }
			set {
				if (_BSIC != value) {
					OnBSICChanging(value);
					SendPropertyChanging();
					_BSIC = value;
					SendPropertyChanged("BSIC");
					OnBSICChanged();
				}
			}
		}
		
		partial void OnTCHChanging(string value);
		partial void OnTCHChanged();
		private string _TCH;
		[Column(Storage=@"_TCH", DbType=@"VarChar(200)")]
		public string TCH
		{
			get { return _TCH; }
			set {
				if (_TCH != value) {
					OnTCHChanging(value);
					SendPropertyChanging();
					_TCH = value;
					SendPropertyChanged("TCH");
					OnTCHChanged();
				}
			}
		}
		
		partial void OnHOPChanging(string value);
		partial void OnHOPChanged();
		private string _HOP;
		[Column(Storage=@"_HOP", DbType=@"VarChar(40)")]
		public string HOP
		{
			get { return _HOP; }
			set {
				if (_HOP != value) {
					OnHOPChanging(value);
					SendPropertyChanging();
					_HOP = value;
					SendPropertyChanged("HOP");
					OnHOPChanged();
				}
			}
		}
		
		partial void OnHSNChanging(string value);
		partial void OnHSNChanged();
		private string _HSN;
		[Column(Storage=@"_HSN", DbType=@"VarChar(40)")]
		public string HSN
		{
			get { return _HSN; }
			set {
				if (_HSN != value) {
					OnHSNChanging(value);
					SendPropertyChanging();
					_HSN = value;
					SendPropertyChanged("HSN");
					OnHSNChanged();
				}
			}
		}
		
		partial void OnLongitudeChanging(decimal? value);
		partial void OnLongitudeChanged();
		private decimal? _Longitude;
		[Column(Storage=@"_Longitude", DbType=@"Decimal(10,6)")]
		public decimal? Longitude
		{
			get { return _Longitude; }
			set {
				if (_Longitude != value) {
					OnLongitudeChanging(value);
					SendPropertyChanging();
					_Longitude = value;
					SendPropertyChanged("Longitude");
					OnLongitudeChanged();
				}
			}
		}
		
		partial void OnLatitudeChanging(decimal? value);
		partial void OnLatitudeChanged();
		private decimal? _Latitude;
		[Column(Storage=@"_Latitude", DbType=@"Decimal(10,6)")]
		public decimal? Latitude
		{
			get { return _Latitude; }
			set {
				if (_Latitude != value) {
					OnLatitudeChanging(value);
					SendPropertyChanging();
					_Latitude = value;
					SendPropertyChanged("Latitude");
					OnLatitudeChanged();
				}
			}
		}
		
		partial void OnDirChanging(short? value);
		partial void OnDirChanged();
		private short? _Dir;
		[Column(Storage=@"_Dir", DbType=@"SmallInt")]
		public short? Dir
		{
			get { return _Dir; }
			set {
				if (_Dir != value) {
					OnDirChanging(value);
					SendPropertyChanging();
					_Dir = value;
					SendPropertyChanged("Dir");
					OnDirChanged();
				}
			}
		}
		
		partial void OnAnt_sizeChanging(short? value);
		partial void OnAnt_sizeChanged();
		private short? _Ant_size;
		[Column(Storage=@"_Ant_size", DbType=@"SmallInt")]
		public short? Ant_size
		{
			get { return _Ant_size; }
			set {
				if (_Ant_size != value) {
					OnAnt_sizeChanging(value);
					SendPropertyChanging();
					_Ant_size = value;
					SendPropertyChanged("Ant_size");
					OnAnt_sizeChanged();
				}
			}
		}
		
		partial void OnFont_sizeChanging(short? value);
		partial void OnFont_sizeChanged();
		private short? _Font_size;
		[Column(Storage=@"_Font_size", DbType=@"SmallInt")]
		public short? Font_size
		{
			get { return _Font_size; }
			set {
				if (_Font_size != value) {
					OnFont_sizeChanging(value);
					SendPropertyChanging();
					_Font_size = value;
					SendPropertyChanged("Font_size");
					OnFont_sizeChanged();
				}
			}
		}
		
		partial void OnMI_STYLEChanging(string value);
		partial void OnMI_STYLEChanged();
		private string _MI_STYLE;
		[Column(Storage=@"_MI_STYLE", DbType=@"VarChar(254)")]
		public string MI_STYLE
		{
			get { return _MI_STYLE; }
			set {
				if (_MI_STYLE != value) {
					OnMI_STYLEChanging(value);
					SendPropertyChanging();
					_MI_STYLE = value;
					SendPropertyChanged("MI_STYLE");
					OnMI_STYLEChanged();
				}
			}
		}
		
		partial void OnMI_PRINXChanging(int value);
		partial void OnMI_PRINXChanged();
		private int _MI_PRINX;
		[Column(Storage=@"_MI_PRINX", AutoSync=AutoSync.OnInsert, DbType=@"Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int MI_PRINX
		{
			get { return _MI_PRINX; }
			set {
				if (_MI_PRINX != value) {
					OnMI_PRINXChanging(value);
					SendPropertyChanging();
					_MI_PRINX = value;
					SendPropertyChanged("MI_PRINX");
					OnMI_PRINXChanged();
				}
			}
		}
		
		partial void OnSP_GEOMETRYChanging(Microsoft.SqlServer.Types.SqlGeometry value);
		partial void OnSP_GEOMETRYChanged();
		private Microsoft.SqlServer.Types.SqlGeometry _SP_GEOMETRY;
		[Column(Storage=@"_SP_GEOMETRY", UpdateCheck=UpdateCheck.Never)]
		public Microsoft.SqlServer.Types.SqlGeometry SP_GEOMETRY
		{
			get { return _SP_GEOMETRY; }
			set {
				if (_SP_GEOMETRY != value) {
					OnSP_GEOMETRYChanging(value);
					SendPropertyChanging();
					_SP_GEOMETRY = value;
					SendPropertyChanged("SP_GEOMETRY");
					OnSP_GEOMETRYChanged();
				}
			}
		}
		
		#endregion
	}
}

namespace Linq2SqlGeography
{	
	[Table(Name=@"dbo.SITE")]
	public partial class SITE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Property Change Event Handling
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		public event PropertyChangingEventHandler PropertyChanging;
		public event PropertyChangedEventHandler PropertyChanged;
		
		public virtual void SendPropertyChanging()
		{
			if (PropertyChanging != null) {
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}
			
		public virtual void SendPropertyChanged(String propertyName)
		{
			if (PropertyChanged != null) {
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		#endregion

		#region Construction
		public SITE()
		{
		}
		#endregion

		#region Column Mappings
		partial void OnmscChanging(string value);
		partial void OnmscChanged();
		private string _msc;
		[Column(Storage=@"_msc", DbType=@"NVarChar(30)")]
		public string msc
		{
			get { return _msc; }
			set {
				if (_msc != value) {
					OnmscChanging(value);
					SendPropertyChanging();
					_msc = value;
					SendPropertyChanged("msc");
					OnmscChanged();
				}
			}
		}
		
		partial void OnbscChanging(string value);
		partial void OnbscChanged();
		private string _bsc;
		[Column(Storage=@"_bsc", DbType=@"NVarChar(30)")]
		public string bsc
		{
			get { return _bsc; }
			set {
				if (_bsc != value) {
					OnbscChanging(value);
					SendPropertyChanging();
					_bsc = value;
					SendPropertyChanged("bsc");
					OnbscChanged();
				}
			}
		}
		
		partial void OncellChanging(string value);
		partial void OncellChanged();
		private string _cell;
		[Column(Storage=@"_cell", DbType=@"NVarChar(30)")]
		public string cell
		{
			get { return _cell; }
			set {
				if (_cell != value) {
					OncellChanging(value);
					SendPropertyChanging();
					_cell = value;
					SendPropertyChanged("cell");
					OncellChanged();
				}
			}
		}
		
		partial void Oncell_nameChanging(string value);
		partial void Oncell_nameChanged();
		private string _cell_name;
		[Column(Storage=@"_cell_name", DbType=@"NVarChar(90)")]
		public string cell_name
		{
			get { return _cell_name; }
			set {
				if (_cell_name != value) {
					Oncell_nameChanging(value);
					SendPropertyChanging();
					_cell_name = value;
					SendPropertyChanged("cell_name");
					Oncell_nameChanged();
				}
			}
		}
		
		partial void OnlongitudeChanging(decimal? value);
		partial void OnlongitudeChanged();
		private decimal? _longitude;
		[Column(Storage=@"_longitude", DbType=@"Decimal(11,6)")]
		public decimal? longitude
		{
			get { return _longitude; }
			set {
				if (_longitude != value) {
					OnlongitudeChanging(value);
					SendPropertyChanging();
					_longitude = value;
					SendPropertyChanged("longitude");
					OnlongitudeChanged();
				}
			}
		}
		
		partial void OnlatitudeChanging(decimal? value);
		partial void OnlatitudeChanged();
		private decimal? _latitude;
		[Column(Storage=@"_latitude", DbType=@"Decimal(11,6)")]
		public decimal? latitude
		{
			get { return _latitude; }
			set {
				if (_latitude != value) {
					OnlatitudeChanging(value);
					SendPropertyChanging();
					_latitude = value;
					SendPropertyChanged("latitude");
					OnlatitudeChanged();
				}
			}
		}
		
		partial void OnbandChanging(int value);
		partial void OnbandChanged();
		private int _band;
		[Column(Storage=@"_band", DbType=@"Int NOT NULL", CanBeNull=false)]
		public int band
		{
			get { return _band; }
			set {
				if (_band != value) {
					OnbandChanging(value);
					SendPropertyChanging();
					_band = value;
					SendPropertyChanged("band");
					OnbandChanged();
				}
			}
		}
		
		partial void OnarfcnChanging(decimal? value);
		partial void OnarfcnChanged();
		private decimal? _arfcn;
		[Column(Storage=@"_arfcn", DbType=@"Decimal(3,0)")]
		public decimal? arfcn
		{
			get { return _arfcn; }
			set {
				if (_arfcn != value) {
					OnarfcnChanging(value);
					SendPropertyChanging();
					_arfcn = value;
					SendPropertyChanged("arfcn");
					OnarfcnChanged();
				}
			}
		}
		
		partial void OnheightChanging(string value);
		partial void OnheightChanged();
		private string _height;
		[Column(Storage=@"_height", DbType=@"VarChar(3)")]
		public string height
		{
			get { return _height; }
			set {
				if (_height != value) {
					OnheightChanging(value);
					SendPropertyChanging();
					_height = value;
					SendPropertyChanged("height");
					OnheightChanged();
				}
			}
		}
		
		partial void OndirChanging(decimal? value);
		partial void OndirChanged();
		private decimal? _dir;
		[Column(Storage=@"_dir", DbType=@"Decimal(3,0)")]
		public decimal? dir
		{
			get { return _dir; }
			set {
				if (_dir != value) {
					OndirChanging(value);
					SendPropertyChanging();
					_dir = value;
					SendPropertyChanged("dir");
					OndirChanged();
				}
			}
		}
		
		partial void OntiltChanging(decimal? value);
		partial void OntiltChanged();
		private decimal? _tilt;
		[Column(Storage=@"_tilt", DbType=@"Decimal(3,0)")]
		public decimal? tilt
		{
			get { return _tilt; }
			set {
				if (_tilt != value) {
					OntiltChanging(value);
					SendPropertyChanging();
					_tilt = value;
					SendPropertyChanged("tilt");
					OntiltChanged();
				}
			}
		}
		
		partial void Onant_bwChanging(int? value);
		partial void Onant_bwChanged();
		private int? _ant_bw;
		[Column(Storage=@"_ant_bw", DbType=@"Int")]
		public int? ant_bw
		{
			get { return _ant_bw; }
			set {
				if (_ant_bw != value) {
					Onant_bwChanging(value);
					SendPropertyChanging();
					_ant_bw = value;
					SendPropertyChanged("ant_bw");
					Onant_bwChanged();
				}
			}
		}
		
		partial void OnpowerChanging(int? value);
		partial void OnpowerChanged();
		private int? _power;
		[Column(Storage=@"_power", DbType=@"Int")]
		public int? power
		{
			get { return _power; }
			set {
				if (_power != value) {
					OnpowerChanging(value);
					SendPropertyChanging();
					_power = value;
					SendPropertyChanged("power");
					OnpowerChanged();
				}
			}
		}
		
		partial void Onant_gainChanging(string value);
		partial void Onant_gainChanged();
		private string _ant_gain;
		[Column(Storage=@"_ant_gain", DbType=@"VarChar(3)")]
		public string ant_gain
		{
			get { return _ant_gain; }
			set {
				if (_ant_gain != value) {
					Onant_gainChanging(value);
					SendPropertyChanging();
					_ant_gain = value;
					SendPropertyChanged("ant_gain");
					Onant_gainChanged();
				}
			}
		}
		
		partial void Onant_typeChanging(string value);
		partial void Onant_typeChanged();
		private string _ant_type;
		[Column(Storage=@"_ant_type", DbType=@"VarChar(15)")]
		public string ant_type
		{
			get { return _ant_type; }
			set {
				if (_ant_type != value) {
					Onant_typeChanging(value);
					SendPropertyChanging();
					_ant_type = value;
					SendPropertyChanged("ant_type");
					Onant_typeChanged();
				}
			}
		}
		
		partial void Onant_sizeChanging(int? value);
		partial void Onant_sizeChanged();
		private int? _ant_size;
		[Column(Storage=@"_ant_size", DbType=@"Int")]
		public int? ant_size
		{
			get { return _ant_size; }
			set {
				if (_ant_size != value) {
					Onant_sizeChanging(value);
					SendPropertyChanging();
					_ant_size = value;
					SendPropertyChanged("ant_size");
					Onant_sizeChanged();
				}
			}
		}
		
		#endregion
	}
}
#pragma warning restore 1591