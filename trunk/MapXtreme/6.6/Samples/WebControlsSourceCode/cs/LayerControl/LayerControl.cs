using System;
using System.IO;
using System.Net;
using System.Text;
using System.Web.UI;
using System.Web.UI.Design;
using System.Web.UI.WebControls;
using System.ComponentModel;
using System.Xml;
using System.Xml.XPath;
using System.Xml.Xsl;

namespace MapInfo.WebControls
{
	/// <summary>
	/// This control allows you to manage the visibility of layers for the map.
	/// </summary>
	/// <remarks>This control serves as a starting point to control the layers of your maps. The source code is provided with the samples.
	/// <para>
	/// The LayerControl displays the map layers in a tree view structure and allows you to turn the visibility on or off.
	///  This control also displays a read-only current zoom value. The visibility changes are persistent for the active life of the application using the LayerControl. 
	/// To change a layer's zoom value, use one of the zoom tools, or open the workspace for the map in Workspace Manager.</para>
	/// <para>
	/// In the RenderContents method, the HTML for this control is not drawn. The control contains a zoom value which can be changed by the zoom tools.
	///  In order to update the zoom value when the map changes, the LayerControl registers with the OnLoad event of the MapControl Image tag 
	///  on the client side. When the map updates, the LayerControl gets its HTML from the controller. This control uses XML and XSLT to generate the user interface.
	///  The XSLT transform is done by the controller, and the HTML is streamed back to the client.
	///  </para>
	///  <para>
	///  The concept is derived from http://rollerjm.free.fr/pro/Treeview/Treeview.html. The XML is generated by passing through the MapXtreme object
	///  model, as required by XSLT and then HTML is generated by performing an XSLT transform.
	///  </para>
	/// </remarks>
	[
	ToolboxData("<{0}:LayerControl runat=server></{0}:LayerControl>"),
	Designer(typeof(LayerControlDesigner))
	]
	public class LayerControl : System.Web.UI.WebControls.WebControl
	{
		/// <summary>
		/// Constructor for the LayerControl.
		/// </summary>
		/// <remarks>The constructor sets the path to the root of the resources.</remarks>
		public LayerControl()
		{
			ResourcesPath = Resources.ResourceFolder;	
		}

		private string _mapControlID;
		/// <summary>
		/// ID of the MapControl to be associated.
		/// </summary>
		/// <remarks>This ID is used to get the IMG tag of the MapControl on the client side so that it can be updated. It is important that the MapControl is before the LayerControl in the form. When using frames, the frame containing the mapcontrol needs
		/// to be drawn first.</remarks>
		[
		DesignerSerializationVisibility(DesignerSerializationVisibility.Visible),
		PersistenceMode(PersistenceMode.Attribute),
		TypeConverter(typeof(ServerControlConverter))
		]
		public string MapControlID {
			get {
				return _mapControlID;
			}
			set {
				_mapControlID = value;
			}
		}

		/// <summary>
		/// The URL pointing to the root of all resources used by the MapXtreme web controls.
		/// </summary>
		/// <remarks>You can change the root to point to your own root instead of the default MapXtremeWebResources xx_xx root.
		/// <para>
		/// There are three files Interaction.js, Command.js, and Tool.js that are used by the MapXtreme webcontrols. These script statements are rendered at 
		/// runtime. This root is used in the path. If you want to customize the scripts, you can either add them to these files. Or if there are additional files
		/// you want to render, you can manually put script statements in the webform.
		/// </para>
		///  </remarks>
		[
		Browsable(true),
		DesignerSerializationVisibility(DesignerSerializationVisibility.Visible),
		Editor(typeof(UrlEditor), typeof(System.Drawing.Design.UITypeEditor)),
		PersistenceMode(PersistenceMode.Attribute),
		]
		public string ResourcesPath{
			get {
				return (string)ViewState["ResourcesPath"];
			}
			set {ViewState["ResourcesPath"] = value;}
		}

		/// <summary>
		/// Writes the source for javascript files on the page.
		/// </summary>
		/// <param name="e">EventArg</param>
		/// <remarks>One of the javascript file contains the code to use the tree view.</remarks>
		protected override void OnLoad(EventArgs e) {
			base.OnLoad(e);
			// render code specific to mapcontrol
			string codeName = "Interaction.js";
			if(!Page.IsClientScriptBlockRegistered(codeName)) {
				// Register the client code:
				string format = "\n<script language=\"javascript\" type=\"text/javascript\" src=\"{0}\"></script>";
				Page.RegisterClientScriptBlock(codeName, string.Format(format, ResourcesPath +"/"+codeName));
			}

			codeName = "Command.js";
			if(!Page.IsClientScriptBlockRegistered(codeName)) {
				// Register the client code:
				string format = "\n<script language=\"javascript\"  type=\"text/javascript\" src=\"{0}\"></script>";
				Page.RegisterClientScriptBlock(codeName, string.Format(format, ResourcesPath +"/"+codeName));
			}

			// render code specific to mapcontrol
			codeName = "LayerControl2.js";
			if(!Page.IsClientScriptBlockRegistered(codeName)) {
				// Register the client code:
				string format = "\n<script language=\"javascript\"  type=\"text/javascript\" src=\"{0}\"></script>";
				Page.RegisterClientScriptBlock(codeName, string.Format(format, ResourcesPath +"/"+codeName));
			}
		}

		/// <summary> 
		/// Renders the control.
		/// </summary>
		/// <param name="output">The HTML writer to write out to.</param>
		/// <remarks>This method also writes the javascript code containing information that is used to perform map operations. It creates a javascript object passing it parameters
		/// such as ID of the mapcontrol, it's own ID, etc.</remarks>
		protected override void RenderContents(HtmlTextWriter output)
		{
			base.RenderContents(output);
			if (Context != null){
				string initCode = String.Format("var {0}LayerInfo = new LayerInfo('{1}', '{2}', '{3}', '{4}');", UniqueID, UniqueID, MapControlID, ResourcesPath, "treeview2.xslt");
				string activateScript = String.Format("<script type='text/javascript'>AppendLayerScriptToForm(\"{0}\");</script>", initCode);
				Page.RegisterStartupScript(UniqueID, activateScript);
			}
		}
	}
}
